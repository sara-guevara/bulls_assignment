DRB_per_game = DRB / G,
TRB_per_game = TRB / G,
PF_per_game = PF / G)
df_team <- df_team %>%
mutate (PTS_pmp = PTS / MP ,
AST_pmp = AST / MP,
FG_pmp = FGA / MP,
x3P_pmp = x3P / MP ,
x2P_pmp = x2P / MP ,
FT_pmp = FTA / MP,
STL_pmp = STL / MP ,
BLK_pmp = BLK / MP,
TOV_pmp = TOV / MP,
ORB_pmp = ORB / MP,
DRB_pmp = DRB / MP,
TRB_pmp = TRB / MP,
PF_pmp = PF / MP)
df_team <- df_team %>%
mutate (PTS_pmp = PTS / MP ,
AST_pmp = AST / MP,
FG_pmp = FGA / MP,
x3P_pmp = x3P / MP ,
x2P_pmp = x2P / MP ,
FT_pmp = FTA / MP,
STL_pmp = STL / MP ,
BLK_pmp = BLK / MP,
TOV_pmp = TOV / MP,
ORB_pmp = ORB / MP,
DRB_pmp = DRB / MP,
TRB_pmp = TRB / MP,
PF_pmp = PF / MP)
df_team <- df_team %>%
mutate (PTS_pmp = PTS / (W/G) ,
AST_pmp = AST / (W/G),
FG_pmp = FGA / (W/G),
x3P_pmp = x3P / (W/G) ,
x2P_pmp = x2P / (W/G) ,
FT_pmp = FTA / (W/G),
STL_pmp = STL / (W/G) ,
BLK_pmp = BLK / (W/G),
TOV_pmp = TOV / (W/G),
ORB_pmp = ORB / (W/G),
DRB_pmp = DRB / (W/G),
TRB_pmp = TRB / (W/G),
PF_pmp = PF / (W/G))
df_team <- left_join(x = stat_tm2, y = stat_tm1 [-c(1,3, 23:25)],
by = "Team")
df_team <- df_team %>%
rename( x3P = '3P', x3PA = '3PA', x3Pp = '3P%', x2P = '2P', x2PA = '2PA', x2Pp = '2P%', FGp = 'FG%', FTp = 'FT%', x3PAr = "3PAr", TSp = "TS%", eFGp = "eFG%", TOVp = "TOV%", ORBp = "ORB%", FT_per_FGA = "FT/FGA", DRBp = "DRB%")
df_team <- df_team %>%
mutate (PTS_per_game = PTS / G,
AST_per_game = AST / G,
FG_per_game = FGA / G,
x3P_per_game = x3P / G,
x2P_per_game = x2PA / G,
FT_per_game = FTA / G,
STL_per_game = STL / G,
BLK_per_game = BLK / G,
TOV_per_game = TOV / G,
ORB_per_game = ORB / G,
DRB_per_game = DRB / G,
TRB_per_game = TRB / G,
PF_per_game = PF / G)
df_team <- df_team %>%
mutate (PTS_per_game = PTS / G,
winp = W/G,
AST_per_game = AST / G,
FG_per_game = FGA / G,
x3P_per_game = x3P / G,
x2P_per_game = x2PA / G,
FT_per_game = FTA / G,
STL_per_game = STL / G,
BLK_per_game = BLK / G,
TOV_per_game = TOV / G,
ORB_per_game = ORB / G,
DRB_per_game = DRB / G,
TRB_per_game = TRB / G,
PF_per_game = PF / G)
df_team <- df_team %>%
mutate (PTS_per_game = PTS / G,
WINp = W/G,
AST_per_game = AST / G,
FG_per_game = FGA / G,
x3P_per_game = x3P / G,
x2P_per_game = x2PA / G,
FT_per_game = FTA / G,
STL_per_game = STL / G,
BLK_per_game = BLK / G,
TOV_per_game = TOV / G,
ORB_per_game = ORB / G,
DRB_per_game = DRB / G,
TRB_per_game = TRB / G,
PF_per_game = PF / G)
_
df_team <- df_team %>%
mutate (PTS_pmp = PTS / MP ,
AST_pmp = AST / MP,
FG_pmp = FGA / MP,
x3P_pmp = x3P / MP ,
x2P_pmp = x2P / MP ,
FT_pmp = FTA / MP,
STL_pmp = STL / MP ,
BLK_pmp = BLK / MP,
TOV_pmp = TOV / MP,
ORB_pmp = ORB / MP,
DRB_pmp = DRB / MP,
TRB_pmp = TRB / MP,
PF_pmp = PF / MP)
ggplot(df_team, aes(x = PTS, y = WINp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
ggplot(df_team, aes(x = PTS_per_game, y = WINp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
ggplot(df_team, aes(x = WINp, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
fit = lm(PTS_per_game ~ WINp, data = df_team)
summary(fit)
tidy(fit, conf.int = TRUE)
fit = lm(WINp ~ PTS_per_game, data = df_team)
fit = lm(PTS_per_game ~ WINp, data = df_team)
summary(fit)
PTS_per_game
fit = lm(WINp ~ PTS_per_game, data = df_team)
summary(fit)
PTS_per_game
ggplot(df_team, aes(x =PTS_per_game , y = WINp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
tidy(fit, conf.int = TRUE)
tidy(fit, conf.int = TRUE)
ggplot(df_team, aes(x =AST_per_game , y = WINp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
fit_ast = lm(WINp ~ PTS_per_game, data = df_team)
summary(fit)
tidy(fit_ast, conf.int = TRUE)
fit_ast = lm(WINp ~ AST_per_game, data = df_team)
summary(fit)
ggplot(df_team, aes(x =AST_per_game , y = WINp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
fit_ast = lm(WINp ~ AST_per_game, data = df_team)
summary(fit)
tidy(fit_ast, conf.int = TRUE)
pairs(formula = ~ PTS_pmp + AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp + STL_pmp + BLK_pmp + TOV_pmp + DRB_pmp + ORB_pmp + TRB_pmp, data = df_team)
pairs(formula = ~ PTS_pmp+ AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp, data = df_team)
lm_teams_pg <- lm(PTS_per_game ~ AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game + STL_per_game + BLK_per_game + TOV_per_game + DRB_per_game + ORB_per_game + TRB_per_game, data = df_team)
tidy(lm_teams_pg, conf.int = TRUE)
lm_teams_wp <- lm(WINp ~ PTS_per_game AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game, data = df_team)
lm_teams_wp <- lm(WINp ~ PTS_per_game + AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game, data = df_team)
tidy(lm_teams_wp, conf.int = TRUE)
lm_teams_wp <- lm(W ~ PTS_per_game + AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game, data = df_team)
tidy(lm_teams_wp, conf.int = TRUE)
lm_teams_wp <- lm(W ~ AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game, data = df_team)
tidy(lm_teams_wp, conf.int = TRUE)
lm_teams_wp <- lm(WINp ~ AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game, data = df_team)
tidy(lm_teams_wp, conf.int = TRUE)
lm_teams_wp <- lm(W ~ AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game, data = df_team)
tidy(lm_teams_wp, conf.int = TRUE)
pairs(formula = ~ PTS_pmp + AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp + STL_pmp + BLK_pmp + TOV_pmp + DRB_pmp + ORB_pmp + TRB_pmp, data = df_team)
pairs(formula = ~ PTS_pmp+ AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp, data = df_team)
ggplot(df_team, aes(x =PTS , y = W)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
fit = lm(W ~ PTS, data = df_team)
summary(fit)
df_team <- df_team %>%
mutate (PTS_pmp = PTS / MP ,
AST_pmp = AST / MP,
FG_pmp = FGA / MP,
x3P_pmp = x3P / MP ,
x2P_pmp = x2P / MP ,
FT_pmp = FTA / MP,
STL_pmp = STL / MP ,
BLK_pmp = BLK / MP,
TOV_pmp = TOV / MP,
ORB_pmp = ORB / MP,
DRB_pmp = DRB / MP,
TRB_pmp = TRB / MP,
PF_pmp = PF / MP)
fit = lm(WINp ~ PTS_per_game, data = df_team)
summary(fit)
tidy(fit, conf.int = TRUE)
lm_teams_wp <- lm(WINp ~ AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game, data = df_team)
tidy(lm_teams_wp, conf.int = TRUE)
summary(lm_teams_wp)
tidy(lm_teams_pmp, conf.int = TRUE)
lm_teams_pmp <- lm(WInp ~ AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp + STL_pmp + BLK_pmp + TOV_pmp + DRB_pmp + ORB_pmp + TRB_pmp, data = df_team)
lm_teams_pmp <- lm(WINp ~ AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp + STL_pmp + BLK_pmp + TOV_pmp + DRB_pmp + ORB_pmp + TRB_pmp, data = df_team)
tidy(lm_teams_pmp, conf.int = TRUE)
lm_teams_pmp <- lm(PTS_pmp ~ AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp + STL_pmp + BLK_pmp + TOV_pmp + DRB_pmp + ORB_pmp + TRB_pmp, data = df_team)
tidy(lm_teams_pmp, conf.int = TRUE)
summary per minute played}
summary(lm_teams_pmp)
lm_teams_pmp <- lm(PTS_pmp ~ AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp + DRB_pmp + ORB_pmp + TRB_pmp, data = df_team)
tidy(lm_teams_pmp, conf.int = TRUE)
lm_teams_pmp <- lm(PTS_pmp ~ AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp, data = df_team)
tidy(lm_teams_pmp, conf.int = TRUE)
df_team <- left_join(x = stat_tm2, y = stat_tm1 [-c(1,3, 23:25)],
by = "Team")
df_team <- left_join(x = stat_tm2, y = stat_tm1 [-c(1,3, 23:25)],
by = "Team")
## renaming variables:
Making sure variables do not include a %, replace with 'p'. And added a 'x' in front of number variables. Change '/' to _per_ .
```{r renaming}
df_team <- df_team %>%
rename( x3P = '3P', x3PA = '3PA', x3Pp = '3P%', x2P = '2P', x2PA = '2PA', x2Pp = '2P%', FGp = 'FG%', FTp = 'FT%', x3PAr = "3PAr", TSp = "TS%", eFGp = "eFG%", TOVp = "TOV%", ORBp = "ORB%", FT_per_FGA = "FT/FGA", DRBp = "DRB%")
df_team <- df_team %>%
rename( x3P = '3P', x3PA = '3PA', x3Pp = '3P%', x2P = '2P', x2PA = '2PA', x2Pp = '2P%', FGp = 'FG%', FTp = 'FT%', x3PAr = "3PAr", TSp = "TS%", eFGp = "eFG%", TOVp = "TOV%", ORBp = "ORB%", FT_per_FGA = "FT/FGA", DRBp = "DRB%")
## Normalising key metrics
We want normalise the key metrics to per game
```{r Normalising metrics_pg}
df_team <- df_team %>%
mutate (PTS_per_game = PTS / G,
WINp = W/G,
AST_per_game = AST / G,
FG_per_game = FGA / G,
x3P_per_game = x3P / G,
x2P_per_game = x2PA / G,
FT_per_game = FTA / G,
STL_per_game = STL / G,
BLK_per_game = BLK / G,
TOV_per_game = TOV / G,
ORB_per_game = ORB / G,
DRB_per_game = DRB / G,
TRB_per_game = TRB / G,
PF_per_game = PF / G)
df_team <- df_team %>%
mutate (PTS_per_game = PTS / G,
WINp = W/G,
AST_per_game = AST / G,
FG_per_game = FGA / G,
x3P_per_game = x3P / G,
x2P_per_game = x2PA / G,
FT_per_game = FTA / G,
STL_per_game = STL / G,
BLK_per_game = BLK / G,
TOV_per_game = TOV / G,
ORB_per_game = ORB / G,
DRB_per_game = DRB / G,
TRB_per_game = TRB / G,
PF_per_game = PF / G)
## Normalising variables per minuted played minutes played
There are 5 players playing roughly 48mins per game. Therefore there are ~240mins per game. WE want normalise these varaibles for the minutes played.
```{r Normalising metrics_pmp}
df_team <- df_team %>%
mutate (PTS_pmp = PTS / MP ,
AST_pmp = AST / MP,
FG_pmp = FGA / MP,
x3P_pmp = x3P / MP ,
x2P_pmp = x2P / MP ,
FT_pmp = FTA / MP,
STL_pmp = STL / MP ,
BLK_pmp = BLK / MP,
TOV_pmp = TOV / MP,
ORB_pmp = ORB / MP,
DRB_pmp = DRB / MP,
TRB_pmp = TRB / MP,
PF_pmp = PF / MP)
# Explore Data
#Points vs Wins
Points are the outcome variable that are associated with winning but we want to check this.
```{r points_wins}
ggplot(df_team, aes(x =PTS , y = W)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
## Linear Model for wins in relationship to points
```{r wins_vs PTS}
fit = lm(WINp ~ PTS_per_game, data = df_team)
summary(fit)
```
Points contribute to 43% of how a team may win. There are other factors that also contribute
```{r wins_vs PTS}
tidy(fit, conf.int = TRUE)
ggplot(df_team, aes(x =AST_per_game , y = WINp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
fit_ast = lm(WINp ~ AST_per_game, data = df_team)
summary(fit)
summary(fit_ast)
tidy(fit_ast, conf.int = TRUE)
ggplot(df_team, aes(AST_pmp, y = PTS_pmp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
ggplot(df_team, aes(AST_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm") +
geom_text(aes(label = Team), nudge_y = 0.5, nudge_x = 0.5)
ggplot(df_team, aes(x3P_pmp, y = PTS_pmp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm") +
geom_text(aes(label = Team), nudge_y = 0.005, nudge_x = 0.0005)
ggplot(df_team, aes(BLK_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm") +
geom_text(aes(label = Team), nudge_y = 0.5, nudge_x = 0.25)
fit_blk = lm(WINp ~ BLK_per_game, data = df_team)
summary(fit_blk)
fit_3P = lm(WINp ~ x3P_per_game, data = df_team)
summary(fit_blk)
fit_3P = lm(W ~ x3P_per_game, data = df_team)
summary(fit_blk)
fit_3P = lm(WINp ~ x3P_per_game, data = df_team)
fit_blk = lm(WINp ~ BLK_per_game, data = df_team)
summary(fit_blk)
lm_teams_pg <- lm(WINp ~ ASTp + FGp + x3Pp + x2Pp + FTp + STLp + BLKp + TOVp + DRBp + ORBp + TRBp, data = df_team)
lm_teams_p <- lm(WINp ~ ASTp + FGp + x3Pp + x2Pp + FTp + STLp + BLKp + TOVp + DRBp + ORBp + TRBp, data = df_team)
tidy(lm_teams_pg, conf.int = TRUE)
tidy(lm_teams_p, conf.int = TRUE)
lm_teams_p <- lm(WINp ~ ASTp + FGp + x3Pp + x2Pp + FTp + STLp + BLKp + TOVp + DRBp + ORBp + TRBp, data = df_team)
tidy(lm_teams_p, conf.int = TRUE)
lm_teams_p <- lm(WINp ~ ASTp + FGp + x3Pp + x2Pp + FTp + STLp + BLKp + TOVp + DRBp + ORBp + TRBp, data = df_team)
lm_teams_p <- lm(WINp ~  FGp + x3Pp + x2Pp + FTp + STLp + BLKp + TOVp + DRBp + ORBp + TRBp, data = df_team)
str(df_team)
car::durbinWatson(lm_teams_pg)
car::durbinWatsonTest(lm_teams_pg)
ccar::avPlots(lm_teams_pg)
library(tidyverse)
library(dplyr)
library(broom)
ccar::avPlots(lm_teams_pg)
car::avPlots(lm_teams_pg)
library(tidyverse)
library(dplyr)
library(broom)
```{r read_data, message=TRUE}
str(stat_tm1)
# Tidying data
## Binding data from two data frames
Binding variables from team 1 data and team 2 data
## renaming variables:
Making sure variables do not include a %, replace with 'p'. And added a 'x' in front of number variables. Change '/' to _per_ .
## Normalising key metrics
We want normalise the key metrics to per game
df_team <- df_team %>%
mutate (PTS_per_game = PTS / G,
WINp = W/G,
AST_per_game = AST / G,
FG_per_game = FGA / G,
x3P_per_game = x3P / G,
x2P_per_game = x2PA / G,
## Normalising variables per minuted played minutes played
There are 5 players playing roughly 48mins per game. Therefore there are ~240mins per game. WE want normalise these varaibles for the minutes played.
FT_per_game = FTA / G,
```{r Normalising metrics_pmp}
df_team <- df_team %>%
rename( x3P = '3P', x3PA = '3PA', x3Pp = '3P%', x2P = '2P', x2PA = '2PA', x2Pp = '2P%', FGp = 'FG%', FTp = 'FT%', x3PAr = "3PAr", TSp = "TS%", eFGp = "eFG%", TOVp = "TOV%", ORBp = "ORB%", FT_per_FGA = "FT/FGA", DRBp = "DRB%")
df_team <- left_join(x = stat_tm2, y = stat_tm1 [-c(1,3, 23:25)],
by = "Team")
df_team <- left_join(x = stat_tm2, y = stat_tm1 [-c(1,3, 23:25)],
by = "Team")
## renaming variables:
Making sure variables do not include a %, replace with 'p'. And added a 'x' in front of number variables. Change '/' to _per_ .
```{r renaming}
df_team <- df_team %>%
rename( x3P = '3P', x3PA = '3PA', x3Pp = '3P%', x2P = '2P', x2PA = '2PA', x2Pp = '2P%', FGp = 'FG%', FTp = 'FT%', x3PAr = "3PAr", TSp = "TS%", eFGp = "eFG%", TOVp = "TOV%", ORBp = "ORB%", FT_per_FGA = "FT/FGA", DRBp = "DRB%")
df_team <- df_team %>%
rename( x3P = '3P', x3PA = '3PA', x3Pp = '3P%', x2P = '2P', x2PA = '2PA', x2Pp = '2P%', FGp = 'FG%', FTp = 'FT%', x3PAr = "3PAr", TSp = "TS%", eFGp = "eFG%", TOVp = "TOV%", ORBp = "ORB%", FT_per_FGA = "FT/FGA", DRBp = "DRB%")
## Normalising key metrics
We want normalise the key metrics to per game
```{r Normalising metrics_pg}
df_team <- df_team %>%
mutate (PTS_per_game = PTS / G,
WINp = W/G,
AST_per_game = AST / G,
FG_per_game = FGA / G,
x3P_per_game = x3P / G,
x2P_per_game = x2PA / G,
FT_per_game = FTA / G,
STL_per_game = STL / G,
BLK_per_game = BLK / G,
TOV_per_game = TOV / G,
ORB_per_game = ORB / G,
DRB_per_game = DRB / G,
TRB_per_game = TRB / G,
PF_per_game = PF / G)
df_team <- df_team %>%
mutate (PTS_per_game = PTS / G,
WINp = W/G,
AST_per_game = AST / G,
FG_per_game = FGA / G,
x3P_per_game = x3P / G,
x2P_per_game = x2PA / G,
FT_per_game = FTA / G,
STL_per_game = STL / G,
BLK_per_game = BLK / G,
TOV_per_game = TOV / G,
ORB_per_game = ORB / G,
DRB_per_game = DRB / G,
TRB_per_game = TRB / G,
PF_per_game = PF / G)
## Normalising variables per minuted played minutes played
There are 5 players playing roughly 48mins per game. Therefore there are ~240mins per game. WE want normalise these varaibles for the minutes played.
df_team <- df_team %>%
mutate (PTS_pmp = PTS / MP ,
AST_pmp = AST / MP,
FG_pmp = FGA / MP,
x3P_pmp = x3P / MP ,
x2P_pmp = x2P / MP ,
FT_pmp = FTA / MP,
STL_pmp = STL / MP ,
BLK_pmp = BLK / MP,
TOV_pmp = TOV / MP,
ORB_pmp = ORB / MP,
DRB_pmp = DRB / MP,
TRB_pmp = TRB / MP,
PF_pmp = PF / MP)
##Check structure of new data set
```{r Str_df_team}
str(df_team)
# Explore Data
#Points vs Wins
Points are the outcome variable that are associated with winning but we want to check this.
## Linear Model for wins in relationship to points
```{r wins_vs PTS}
fit = lm(WINp ~ PTS_per_game, data = df_team)
summary(fit)
```
Points contribute to 43% of how a team may win. There are other factors that also contribute
If we increase out points per game by 1, then we increase our chance of winning by 2%
## Assists and Wins
Lets see how much of the assists contribute to winning.
25% of assists contribute to winning
## Linear Model for wins in relationship to points
```{r wins_vs BLK}
fit_blk = lm(WINp ~ BLK_per_game, data = df_team)
summary(fit_blk)
```
# Points vs Assists
# Points vs FG
# Points vs x3P
ggplot(df_team, aes(x = x3P_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm")
# Points vs Steals
```{r points vs Steals per minute played}
# Points vs Blocks
```{r points vs Blocks per minute played}
ggplot(df_team, aes(BLK_pmp, y = PTS_pmp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm") +
geom_text(aes(label = Team), nudge_y = 0.003, nudge_x = 0.0005)
```{r points vs Blocks per game}
ggplot(df_team, aes(BLK_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm") +
geom_text(aes(label = Team), nudge_y = 0.5, nudge_x = 0.25)
# Points vs Free Throws
```{r points vs Free Throws per minute played}
ggplot(df_team, aes(FT_pmp, y = PTS_pmp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm") +
geom_text(aes(label = Team), nudge_y = 0.002, nudge_x = 0.002, size = 3)
ggplot(df_team, aes(FT_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm") +
geom_text(aes(label = Team), nudge_y = 0.5, nudge_x = 0.25, size = 3)
# Points vs Offensive Rebounds
```{r points vs Off Rebounds per minute played}
```{r points vs Off Rebounds per game}
# Points vs defensive Rebounds
```{r points vs Defensive Rebounds per minute played}
ggplot(df_team, aes(DRB_pmp, y = PTS_pmp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm") +
geom_text(aes(label = Team), nudge_y = 0.002, nudge_x = 0.002, size = 3)
```{r points vs Defensive Rebounds per game}
ggplot(df_team, aes(DRB_per_game, y = PTS_per_game)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm") +
geom_text(aes(label = Team), nudge_y = 0.002, nudge_x = 0.002, size = 3)
# Points vs Total Rebounds
```{r points vs total per minute played}
ggplot(df_team, aes(TRB_pmp, y = PTS_pmp)) +
geom_point(alpha = 0.5, colour = "purple") +
geom_smooth(method = "lm") +
geom_text(aes(label = Team), nudge_y = 0.002, nudge_x = 0.002, size = 3)
## Checking for confounding variables
```{r confounding}
pairs(formula = ~ PTS_pmp + AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp + STL_pmp + BLK_pmp + TOV_pmp + DRB_pmp + ORB_pmp + TRB_pmp, data = df_team)
pairs(formula = ~ PTS_pmp+ AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp, data = df_team)
## Multiple Regression
```{r MLR per game}
tidy(lm_teams_pg, conf.int = TRUE)
lm_teams_pg <- lm(PTS_per_game ~ AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game + STL_per_game + BLK_per_game + TOV_per_game + DRB_per_game + ORB_per_game + TRB_per_game, data = df_team)
tidy(lm_teams_pg, conf.int = TRUE)
lm_teams_wp <- lm(WINp ~ AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game, data = df_team)
tidy(lm_teams_wp, conf.int = TRUE)
lm_teams_wp <- lm(WINp ~ AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game, data = df_team)
tidy(lm_teams_wp, conf.int = TRUE)
summary(lm_teams_wp)
lm_teams_pmp <- lm(PTS_pmp ~ AST_pmp + FG_pmp + x3P_pmp + x2P_pmp + FT_pmp, data = df_team)
tidy(lm_teams_pmp, conf.int = TRUE)
```{r summary per minute played}
summary(lm_teams_pmp)
## Multiple Regression
lm_teams_pg <- lm(PTS_per_game ~ AST_per_game + FG_per_game + x3P_per_game + x2P_per_game + FT_per_game + STL_per_game + BLK_per_game + TOV_per_game + DRB_per_game + ORB_per_game + TRB_per_game, data = df_team)
tidy(lm_teams_pg, conf.int = TRUE)
## Checking assumptions for MLR
Checking assumptions for linear model (lm_teams_pg)
1, Response variables should be continuous. Yes this is met
2. There are wo or more explanatory variables that are continuous or categorical Yes all of variables are continous
3. Independence
```{r Assumpt_independence}
car::durbinWatsonTest(lm_teams_pg)
```{r Assumpt_independence}
4. Linearity
```{r linearity}
car::durbinWatsonTest(lm_teams_pg)
car::avPlots(lm_teams_pg)
